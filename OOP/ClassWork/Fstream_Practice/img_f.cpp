#include <fstream>
#include <iostream>

using namespace std;


//ДВУНАПРАВЛЕННЫЙ ПОТОК
//КАРТИНКИ



int main()
{
    const int size = 4096;//байты
    char buffer[size] = {};

    // Открытие файла на чтение в бинарном режиме (при этом файл должен существовать).
    ifstream in("Portal 2.jpg", ios::binary | ios::in);

    // Если файл удалось открыть.
    if (in)
    {
    //ДВУНАПРАВЛЕННЫЙ ПОТОК
        // Создание двунаправленного файлового потока и связывание с ним файла, открываемого в бинарном режиме на 
        // чтение и запись.
        fstream inout("Portal 2 (in-out).jpg", ios::binary | ios::in | ios::out | ios::trunc); // КОПИЯ
        //И ЧИСТА И ЗАПИСЬ
	

    //ЕЩЕ ОДИН ПОТОК ДЛЯ ЗАПИСИ
        // Открытие файла на запись в бинарном режиме (если файл не существует - он будет создан, если файл 
        // существует - он будет усечен до нулевой длины).
        ofstream out("Portal 2 (out).jpg", ios::binary | ios::out);

        while (!in.eof()) // ПОКА НЕ КОНЕЦ
        {
            // Из входного потока считывается в буфер блок данных (4096 байт).
            in.read(buffer, size); // ЧИСТКА БАЙТОВ В ОЗУ

            // В двунаправленный поток записывается считанный блок данных. При этом gcount возвращает реальное число 
            // считанных байт.
            inout.write(buffer, in.gcount()); // ЗАПИСЬ ОТКУДА НАБОР БАЙТОВ
            //ВОЗРАЩАЕТ СЧИТАННЫЕ БАЙТЫ, А НЕ СКОЛЬКО В БУФЕРЕ ОСТАЛОСЬ, НЕ БУДЕТ МУСОРНОГО ЗНАЧЕНИЯ
        }

        // Закрытие входного файлового потока.
        in.close();

        // Смещение файлового указателя на начало файла в двунаправленном потоке.
        inout.seekg(0, ios::beg); // ТОЛЬКО С ОБЬКТОМ fstream, ИБО ДВУНАПР
        

        // Цикл продолжается до тех пор, пока не наступит конец файла.
        while (!inout.eof())
        {
            // Из двунаправленного потока считывается в буфер блок данных (4096 байт).
            inout.read(buffer, size);

            // В выходной поток записывается считанный блок данных. При этом gcount возвращает реальное число 
            // считанных байт.
            out.write(buffer, inout.gcount());
        }

        // Закрытие двунаправленного файлового потока.
        inout.close();

        // Закрытие выходного файлового потока.
        out.close();
    }
    else
    {
        cout << "Could not open the file" << endl;
    }

    return 0;
}